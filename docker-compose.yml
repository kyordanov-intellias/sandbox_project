services:
  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev", "--", "--host"]
    container_name: frontend
    depends_on:
      - gateway
    networks:
      - app-network

  # Backend Services
  gateway:
    build:
      context: ./server/services/gateway
      dockerfile: Dockerfile
    ports:
      - "${GATEWAY_PORT:-4000}:${GATEWAY_PORT:-4000}"
    volumes:
      - ./server/services/gateway:/app
      - /app/node_modules
    env_file:
      - .env
    command: npx ts-node-dev --respawn --transpile-only --poll src/index.ts
    environment:
      - NODE_ENV=development
    depends_on:
      - auth-service
      - user-service
      - posts-service
    container_name: gateway-service
    tty: true
    networks:
      - app-network

  auth-service:
    build:
      context: ./server/services/auth-service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT:-4001}:${AUTH_SERVICE_PORT:-4001}"
    volumes:
      - ./server/services/auth-service:/app
      - /app/node_modules
    env_file:
      - .env
    command: npx ts-node-dev --respawn --transpile-only --poll src/index.ts
    environment:
      - NODE_ENV=development
    container_name: auth-service
    depends_on:
      - postgres_auth
      - redis
      - rabbitmq
    tty: true
    networks:
      - app-network

  user-service:
    build:
      context: ./server/services/user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT:-4002}:${USER_SERVICE_PORT:-4002}"
    volumes:
      - ./server/services/user-service:/app
      - /app/node_modules
    env_file:
      - .env
    command: npx ts-node-dev --respawn --transpile-only --poll src/index.ts
    environment:
      - NODE_ENV=development
    container_name: user-service
    depends_on:
      - postgres_user
      - rabbitmq
    tty: true
    networks:
      - app-network

  posts-service:
    build:
      context: ./server/services/posts-service
      dockerfile: Dockerfile
    ports:
      - "${POSTS_SERVICE_PORT:-4003}:${POSTS_SERVICE_PORT:-4003}"
    volumes:
      - ./server/services/posts-service:/app
      - /app/node_modules
    env_file:
      - .env
    command: npx ts-node-dev --respawn --transpile-only --poll src/index.ts
    environment:
      - NODE_ENV=development
    container_name: posts-service
    depends_on:
      - postgres_posts
    tty: true
    networks:
      - app-network

  # PostgreSQL databases
  postgres_auth:
    image: postgres:latest
    container_name: postgres_auth
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres_user:
    image: postgres:latest
    container_name: postgres_user
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres_posts:
    image: postgres:latest
    container_name: postgres_posts
    restart: always
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: posts_db
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_posts_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/var/lib/redis/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

volumes:
  postgres_auth_data:
  postgres_user_data:
  postgres_posts_data:
  redis_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
